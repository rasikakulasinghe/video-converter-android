apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * Enable separate APKs for different architectures to reduce APK size.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Universal APK includes all architectures, useful for testing but larger size
 */
def universalApk = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.videoconverterandroid"
    defaultConfig {
        applicationId "com.videoconverterandroid"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        
        // Video Converter specific configurations
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        
        // Enable vector drawables for older Android versions
        vectorDrawables.useSupportLibrary = true
        
        // Specify test instrumentation runner
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    
    /**
     * Split APKs by architecture for smaller download sizes
     */
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk universalApk
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }
    
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            } else {
                // Fallback to debug keystore for development builds
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            debuggable false
            
            // Optional: Enable R8 full mode for better optimization
            android.enableR8.fullMode = true
        }
    }
    
    // Map for ABI codes for split APKs
    project.ext.abiCodes = [
        "armeabi-v7a": 1,
        "arm64-v8a": 2,
        "x86": 3,
        "x86_64": 4
    ]
    
    // Generate version codes for split APKs
    android.applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def abiVersionCode = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
            if (abiVersionCode != null) {
                output.versionCodeOverride = defaultConfig.versionCode * 10 + abiVersionCode
            }
        }
    }
    
    // Packaging options to avoid conflicts
    packagingOptions {
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        
        // FFmpeg Kit specific packaging
        pickFirst "lib/x86/libavcodec.so"
        pickFirst "lib/x86/libavformat.so"
        pickFirst "lib/x86/libavutil.so"
        pickFirst "lib/x86/libswresample.so"
        pickFirst "lib/x86/libswscale.so"
        pickFirst "lib/x86_64/libavcodec.so"
        pickFirst "lib/x86_64/libavformat.so"
        pickFirst "lib/x86_64/libavutil.so"
        pickFirst "lib/x86_64/libswresample.so"
        pickFirst "lib/x86_64/libswscale.so"
        pickFirst "lib/arm64-v8a/libavcodec.so"
        pickFirst "lib/arm64-v8a/libavformat.so"
        pickFirst "lib/arm64-v8a/libavutil.so"
        pickFirst "lib/arm64-v8a/libswresample.so"
        pickFirst "lib/arm64-v8a/libswscale.so"
        pickFirst "lib/armeabi-v7a/libavcodec.so"
        pickFirst "lib/armeabi-v7a/libavformat.so"
        pickFirst "lib/armeabi-v7a/libavutil.so"
        pickFirst "lib/armeabi-v7a/libswresample.so"
        pickFirst "lib/armeabi-v7a/libswscale.so"
    }
    
    // Compile options for compatibility
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
